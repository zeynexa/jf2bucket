[
    {
        "category": { 
            "name": "Problem Solving", 
            "slug": "problem-solving", 
            "description": "Develop analytical thinking and problem-solving skills through algorithmic challenges.",
            "image": "https://raw.githubusercontent.com/zeynexa/jf2bucket/refs/heads/main/icons/problem-solving.svg"
        },
        "sub_categories": [
            { 
                "name": "Arrays & Strings", 
                "slug": "arrays-strings", 
                "description": "Master fundamental operations on arrays and string manipulation techniques.", 
                "image": null,
                "exercises": [
                    {
                        "level": "Intermediate",
                        "title": "Array Algorithms",
                        "description": "Implement common array algorithms and optimization techniques.",
                        "tags": ["arrays", "algorithms", "optimization"],
                        "tasks": [
                            {
                                "type": "Coding",
                                "title": "Two Sum Problem",
                                "question": "<p>Write a function that finds two numbers in an array that add up to a target value.</p><p>Your function should:</p><ul><li>Accept an array of integers and a target sum</li><li>Find two numbers that add to the target</li><li>Return their indices</li><li>Handle cases where no solution exists</li></ul>",
                                "hint": "Use a hash map to store complements for O(n) time complexity",
                                "input": "2 7 11 15\n9",
                                "output": "0 1"
                            },
                            {
                                "type": "MCQ",
                                "title": "Array Sorting Complexity",
                                "question": "<p>What is the time complexity of the best sorting algorithm?</p><p>Consider different sorting algorithms:</p><ul><li>Bubble Sort: O(n²)</li><li>Quick Sort: O(n log n) average</li><li>Merge Sort: O(n log n)</li><li>Heap Sort: O(n log n)</li></ul>",
                                "hint": "Think about the theoretical lower bound for comparison-based sorting",
                                "options": [
                                    "O(n) - linear time sorting",
                                    "O(n log n) - optimal for comparison-based sorting",
                                    "O(n²) - quadratic time",
                                    "O(log n) - logarithmic time"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Remove Duplicates",
                                "question": "<p>Write a function that removes duplicates from a sorted array in-place.</p><p>Your function should:</p><ul><li>Accept a sorted array</li><li>Remove duplicate elements</li><li>Return the new length</li><li>Modify the array in-place</li></ul>",
                                "hint": "Use two pointers technique to track unique elements",
                                "input": "1 1 2 2 3 4 4 5",
                                "output": "5"
                            },
                            {
                                "type": "MCQ",
                                "title": "Array Rotation",
                                "question": "<p>What is the result of rotating array [1,2,3,4,5] by 2 positions to the right?</p><p>Consider: Right rotation moves elements to the right</p>",
                                "hint": "Elements wrap around to the beginning",
                                "options": [
                                    "[3,4,5,1,2] - elements moved right by 2",
                                    "[4,5,1,2,3] - elements moved right by 2",
                                    "[5,1,2,3,4] - elements moved right by 1",
                                    "[2,3,4,5,1] - elements moved left by 1"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Maximum Subarray Sum",
                                "question": "<p>Write a function that finds the maximum sum of a contiguous subarray.</p><p>Your function should:</p><ul><li>Accept an array of integers</li><li>Find the subarray with maximum sum</li><li>Return the maximum sum</li><li>Handle negative numbers</li></ul>",
                                "hint": "Use Kadane's algorithm with dynamic programming approach",
                                "input": "-2 1 -3 4 -1 2 1 -5 4",
                                "output": "6"
                            },
                            {
                                "type": "MCQ",
                                "title": "Array vs Linked List",
                                "question": "<p>What is the time complexity of accessing an element by index in an array vs linked list?</p><p>Consider memory layout and data structure properties</p>",
                                "hint": "Think about how elements are stored in memory",
                                "options": [
                                    "Array: O(1), Linked List: O(n) - arrays have direct access",
                                    "Array: O(n), Linked List: O(1) - linked lists are faster",
                                    "Both: O(1) - constant time access",
                                    "Both: O(n) - linear time access"
                                ],
                                "correct_answer": 0
                            }
                        ]
                    },
                    {
                        "level": "Intermediate",
                        "title": "String Algorithms",
                        "description": "Implement advanced string manipulation and pattern matching algorithms.",
                        "tags": ["strings", "algorithms", "pattern-matching"],
                        "tasks": [
                            {
                                "type": "Coding",
                                "title": "Valid Palindrome",
                                "question": "<p>Write a function that checks if a string is a valid palindrome.</p><p>Your function should:</p><ul><li>Accept a string as input</li><li>Ignore case and non-alphanumeric characters</li><li>Check if it reads the same forwards and backwards</li><li>Return true/false</li></ul>",
                                "hint": "Use two pointers from both ends, skip non-alphanumeric chars",
                                "input": "A man, a plan, a canal: Panama",
                                "output": "true"
                            },
                            {
                                "type": "MCQ",
                                "title": "String Matching",
                                "question": "<p>What is the time complexity of the naive string matching algorithm?</p><p>Consider searching for pattern \"abc\" in text \"abcdef\"</p>",
                                "hint": "Think about worst-case scenario with nested loops",
                                "options": [
                                    "O(n) - linear time",
                                    "O(n*m) - where n is text length, m is pattern length",
                                    "O(n²) - quadratic time",
                                    "O(log n) - logarithmic time"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Longest Common Prefix",
                                "question": "<p>Write a function that finds the longest common prefix among an array of strings.</p><p>Your function should:</p><ul><li>Accept an array of strings</li><li>Find the longest prefix common to all strings</li><li>Return the common prefix</li><li>Handle empty arrays</li></ul>",
                                "hint": "Compare characters at the same position across all strings",
                                "input": "flower flow flight",
                                "output": "fl"
                            },
                            {
                                "type": "MCQ",
                                "title": "String Compression",
                                "question": "<p>What is the compressed form of string \"aaabbbcc\"?</p><p>Consider run-length encoding: count consecutive characters</p>",
                                "hint": "Count consecutive occurrences of each character",
                                "options": [
                                    "\"a3b3c2\" - character followed by count",
                                    "\"abc\" - unique characters only",
                                    "\"3a3b2c\" - count followed by character",
                                    "\"aaabbbcc\" - no compression possible"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Anagram Groups",
                                "question": "<p>Write a function that groups anagrams together from an array of strings.</p><p>Your function should:</p><ul><li>Accept an array of strings</li><li>Group strings that are anagrams</li><li>Return groups of anagrams</li><li>Handle empty input</li></ul>",
                                "hint": "Use sorted string as key in hash map to group anagrams",
                                "input": "eat tea tan ate nat bat",
                                "output": "eat tea ate\ntan nat\nbat"
                            },
                            {
                                "type": "MCQ",
                                "title": "String Permutation",
                                "question": "<p>How many permutations does string \"abc\" have?</p><p>Consider: Permutation = arrangement of all characters</p>",
                                "hint": "Use factorial: n! for n distinct characters",
                                "options": [
                                    "3 - same as string length",
                                    "6 - 3! = 3*2*1",
                                    "9 - 3²",
                                    "1 - only one arrangement possible"
                                ],
                                "correct_answer": 1
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
