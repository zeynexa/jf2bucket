[
    {
        "category": { 
            "name": "Problem Solving", 
            "slug": "problem-solving", 
            "description": "Develop analytical thinking and problem-solving skills through algorithmic challenges.",
            "image": "https://raw.githubusercontent.com/zeynexa/jf2bucket/refs/heads/main/icons/problem-solving.svg"
        },
        "sub_categories": [
            { 
                "name": "Arrays & Strings", 
                "slug": "arrays-strings", 
                "description": "Master fundamental operations on arrays and string manipulation techniques.", 
                "exercises": [
                    {
                        "level": "Expert",
                        "title": "Advanced Array Problems",
                        "description": "Solve complex array problems requiring advanced algorithms and optimization.",
                        "tags": ["arrays", "advanced", "optimization"],
                        "tasks": [
                            {
                                "type": "Coding",
                                "title": "Median of Two Sorted Arrays",
                                "question": "<p>Write a function that finds the median of two sorted arrays of different sizes.</p><p>Your function should:</p><ul><li>Accept two sorted arrays</li><li>Find the median of the combined array</li><li>Handle arrays of different lengths</li><li>Return the median value</li></ul>",
                                "hint": "Use binary search to find the correct partition point",
                                "input": "1 3 8 9 15\n7 11 18 19 21 25",
                                "output": "11"
                            },
                            {
                                "type": "MCQ",
                                "title": "Array Inversion Count",
                                "question": "<p>What is the inversion count of array [3, 1, 2]?</p><p>Inversion: pair (i,j) where i < j and arr[i] > arr[j]</p>",
                                "hint": "Count pairs where larger element comes before smaller element",
                                "options": [
                                    "0 - no inversions",
                                    "1 - (3,1) is an inversion",
                                    "2 - (3,1) and (3,2) are inversions",
                                    "3 - all pairs are inversions"
                                ],
                                "correct_answer": 2
                            },
                            {
                                "type": "Coding",
                                "title": "Trapping Rain Water",
                                "question": "<p>Write a function that calculates how much water can be trapped between bars.</p><p>Your function should:</p><ul><li>Accept an array representing bar heights</li><li>Calculate trapped water between bars</li><li>Return total trapped water</li><li>Handle edge cases</li></ul>",
                                "hint": "Use two pointers to track left and right maximum heights",
                                "input": "0 1 0 2 1 0 1 3 2 1 2 1",
                                "output": "6"
                            },
                            {
                                "type": "MCQ",
                                "title": "Array Partitioning",
                                "question": "<p>What is the time complexity of the Dutch National Flag algorithm?</p><p>Consider: Three-way partitioning of array with three distinct values</p>",
                                "hint": "Think about single-pass algorithms",
                                "options": [
                                    "O(n) - single pass through array",
                                    "O(n log n) - requires sorting",
                                    "O(n²) - quadratic time",
                                    "O(log n) - logarithmic time"
                                ],
                                "correct_answer": 0
                            },
                            {
                                "type": "Coding",
                                "title": "Longest Increasing Subsequence",
                                "question": "<p>Write a function that finds the length of the longest increasing subsequence.</p><p>Your function should:</p><ul><li>Accept an array of integers</li><li>Find longest subsequence where elements are strictly increasing</li><li>Return the length</li><li>Handle empty arrays</li></ul>",
                                "hint": "Use dynamic programming with binary search for optimization",
                                "input": "10 9 2 5 3 7 101 18",
                                "output": "4"
                            },
                            {
                                "type": "MCQ",
                                "title": "Array Circular Queue",
                                "question": "<p>What is the advantage of using a circular queue over a linear queue?</p><p>Consider memory utilization and space efficiency</p>",
                                "hint": "Think about what happens when elements are dequeued",
                                "options": [
                                    "Better time complexity - O(1) operations",
                                    "Better space utilization - reuses empty spaces",
                                    "Simpler implementation - easier to code",
                                    "No advantage - same performance"
                                ],
                                "correct_answer": 1
                            }
                        ]
                    },
                    {
                        "level": "Expert",
                        "title": "Advanced String Problems",
                        "description": "Solve complex string problems requiring advanced algorithms and pattern matching.",
                        "tags": ["strings", "advanced", "pattern-matching"],
                        "tasks": [
                            {
                                "type": "Coding",
                                "title": "Longest Palindromic Substring",
                                "question": "<p>Write a function that finds the longest palindromic substring in a string.</p><p>Your function should:</p><ul><li>Accept a string as input</li><li>Find the longest substring that is a palindrome</li><li>Return the palindrome</li><li>Handle edge cases</li></ul>",
                                "hint": "Use Manacher's algorithm or expand around center approach",
                                "input": "babad",
                                "output": "bab"
                            },
                            {
                                "type": "MCQ",
                                "title": "String Edit Distance",
                                "question": "<p>What is the minimum edit distance between \"horse\" and \"ros\"?</p><p>Edit operations: insert, delete, replace</p>",
                                "hint": "Count minimum operations to transform one string to another",
                                "options": [
                                    "2 - replace 'h' with 'r', delete 'e'",
                                    "3 - replace 'h' with 'r', delete 'o', delete 'e'",
                                    "4 - replace 'h' with 'r', delete 'o', delete 'r', delete 's'",
                                    "5 - all characters need to be changed"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Regular Expression Matching",
                                "question": "<p>Write a function that implements basic regex matching with '.' and '*'.</p><p>Your function should:</p><ul><li>Accept pattern and string</li><li>Handle '.' (any character) and '*' (zero or more)</li><li>Return true if pattern matches</li><li>Handle edge cases</li></ul>",
                                "hint": "Use dynamic programming with memoization",
                                "input": "a.*b\nacb",
                                "output": "true"
                            },
                            {
                                "type": "MCQ",
                                "title": "String Suffix Array",
                                "question": "<p>What is the time complexity of building a suffix array for a string of length n?</p><p>Consider: Suffix array contains all suffixes in sorted order</p>",
                                "hint": "Think about sorting n suffixes of length up to n",
                                "options": [
                                    "O(n) - linear time",
                                    "O(n log n) - sorting n suffixes",
                                    "O(n²) - quadratic time",
                                    "O(n³) - cubic time"
                                ],
                                "correct_answer": 1
                            },
                            {
                                "type": "Coding",
                                "title": "Longest Common Subsequence",
                                "question": "<p>Write a function that finds the longest common subsequence of two strings.</p><p>Your function should:</p><ul><li>Accept two strings</li><li>Find longest subsequence common to both</li><li>Return the LCS length</li><li>Handle empty strings</li></ul>",
                                "hint": "Use dynamic programming with 2D array",
                                "input": "ABCDGH\nAEDFHR",
                                "output": "3"
                            },
                            {
                                "type": "MCQ",
                                "title": "String Trie Data Structure",
                                "question": "<p>What is the time complexity of searching a word in a trie?</p><p>Consider: Trie is a tree-like data structure for strings</p>",
                                "hint": "Think about traversing the trie character by character",
                                "options": [
                                    "O(1) - constant time",
                                    "O(m) - where m is word length",
                                    "O(n) - where n is total number of words",
                                    "O(m log n) - logarithmic search"
                                ],
                                "correct_answer": 1
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
